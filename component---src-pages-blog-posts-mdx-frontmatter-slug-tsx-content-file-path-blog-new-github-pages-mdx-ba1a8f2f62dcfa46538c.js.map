{"version":3,"file":"component---src-pages-blog-posts-mdx-frontmatter-slug-tsx-content-file-path-blog-new-github-pages-mdx-ba1a8f2f62dcfa46538c.js","mappings":"sLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,mbAAob,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,sBAAuB,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,kNAAmNK,EAAAA,cAAoBT,EAAYK,EAAG,CACh8BK,KAAM,0EACL,iBAAkB,2KAA4K,KAAMD,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,4JAA6JK,EAAAA,cAAoBT,EAAYK,EAAG,CACzfK,KAAM,sEACL,aAAc,iUAAkU,KAAMD,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,qeAAse,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,oXAAqX,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,sBAAuB,KAAMG,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,qhBAAshB,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,yBAA0B,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,oNAC9lE,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCfA,MACMc,EAAOC,IACX,IAAKC,MAAM,IAACC,GAAI,SAAEC,GAAYH,EAC9B,OAAOL,EAAAA,cAAoBS,EAAAA,EAAQ,CACjCC,UAAWH,EAAII,YAAYC,OAC1BZ,EAAAA,cAAoB,MAAO,CAC5Ba,UAAW,qCACVb,EAAAA,cAAoB,KAAM,CAC3Ba,UAAW,uCACVN,EAAII,YAAYC,OAAQZ,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,MAAO,CACtHa,UAAW,QACVb,EAAAA,cAAoB,OAAQ,CAC7Ba,UAAW,aACVN,EAAII,YAAYG,MAAOd,EAAAA,cAAoB,OAAQ,CACpDa,UAAW,gBACPb,EAAAA,cAAoB,MAAO,CAC/Ba,UAAW,oDACVL,GAAWR,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,OAAQ,CACzEa,UAAW,iBACV,cAAe,IAAKN,EAAII,YAAYI,KAAKC,KAAIC,GAAOjB,EAAAA,cAAoBkB,EAAAA,KAAM,CAC/EC,GAAI,cAAgBF,EAAIG,cAAgB,IACxCP,UAAW,kBACVI,QAAS,EAGC,SAASI,EAAiB/B,GACvC,OAAOU,EAAAA,cAAoBI,EAAMd,EAAOU,EAAAA,cAAoBsB,EAAqBhC,GACnF,C,sECEO,MAAMiC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBzB,GAC/B,MAAM0B,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfxB,EACFA,EAAW0B,GAGb,IAAIA,KAAsB1B,IAChC,CAAC0B,EAAmB1B,GACzB,C","sources":["webpack://github-pages/./blog/new-github-pages.mdx","webpack://github-pages/./src/pages/blog/posts/{mdx.frontmatter__slug}.tsx","webpack://github-pages/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Prologue: Wordpress\"), \"\\n\", React.createElement(_components.p, null, \"This story begins with my personal blog on Wordpress which you can still find at https://flymetobluemoon.wordpress.com . I have always used WordPress to share flight reviews and travel entries. However, I also wanted a space online where I could share my passion about technology. Additonally, I found WordPress quite limiting in terms of customization and I wanted to flex my coding skills (lol). Enter my static websites journey.\"), \"\\n\", React.createElement(_components.h2, null, \"Enter Github Pages\"), \"\\n\", React.createElement(_components.p, null, \"Upon discovering Github Pages, I published my first static vanilla HTML, CSS and JS site on 17 November 2020. Let's just my design skills were undeveloped. Although you can still find the source code on the \", React.createElement(_components.a, {\n    href: \"https://github.com/flyme2bluemoon/flyme2bluemoon.github.io/tree/master\"\n  }, \"master branch\"), \" of this repo, I'd highly recommend you not in order to preserve your dignity. This edition was just a single HTML page and linked to my socials and that was about it.\"), \"\\n\", React.createElement(_components.h3, null, \"The Renaissance: React\"), \"\\n\", React.createElement(_components.p, null, \"As I learned more about web development, I added some frameworks and libraries to help make developing the page easier. You can find this version on the \", React.createElement(_components.a, {\n    href: \"https://github.com/flyme2bluemoon/flyme2bluemoon.github.io/tree/v2\"\n  }, \"v2 branch\"), \" of this repo. I added React using Create React App and Tailwind for CSS. CSS has always been my biggest struggle but with some help from Flowbite, the site didn't look terrible anymore. I even incorporated my previous Code Gallery page into my static site in order to create a more tightly connected user experience.\"), \"\\n\", React.createElement(_components.p, null, \"However, this version still was far from perfect. For one, React's pages are sent to the browser as empty HTML pages which is less than ideal for speed and optimization of a simply static page. Furthermore, I never really got the react-router working quite properly. I was able to navigate to different pages by first loading the index page but could not directly access the subpages. Additionally, my implementation of rendering blog posts from MDX files was very poorly designed.\"), \"\\n\", React.createElement(_components.h3, null, \"The Interlude: Next.js\"), \"\\n\", React.createElement(_components.p, null, \"After learning React, I also explored working with it's derivative Next.js. I had actually quite enjoyed working with Next.js. I found it's page routing much more intuitive to use and static site generation very nice. Although I will likely continue using Next.js for projects that require basic serverside rendering, the same could not be said about Create React App.\"), \"\\n\", React.createElement(_components.h3, null, \"The Finale: Gatsby\"), \"\\n\", React.createElement(_components.p, null, \"I had heard about Gatsby and decided to skim through its documentation. It looked really promising for exactly what I wanted and it could be served from a static site hosting service like Github Pages. Furthermore, its implementation of page routing was more seamless and it included support for static site generation. This allowed me to create much improved user experience when compared to Create React App. To top it off, Gatsby comes with amazing GraphQL and MDX integrations which allowed me to set up this blog seamlessly.\"), \"\\n\", React.createElement(_components.h2, null, \"Epilogue: The Verdict\"), \"\\n\", React.createElement(_components.p, null, \"When I first embarked on this project 2 years ago, I had not fully realized the full potential of static websites. However, with some frameworks and libraries, static websites are now more powerful than ever.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/flyme2bluemoon.github.io/flyme2bluemoon.github.io/blog/new-github-pages.mdx\";\nimport React from \"react\";\nimport Layout from \"../../../components/layout\";\nimport {Link} from \"gatsby\";\nconst query = \"503612602\";\nconst Post = _ref => {\n  let {data: {mdx}, children} = _ref;\n  return React.createElement(Layout, {\n    pageTitle: mdx.frontmatter.title\n  }, React.createElement(\"div\", {\n    className: \"max-w-[1200px] mx-auto px-16 my-8\"\n  }, React.createElement(\"h1\", {\n    className: \"font-bold text-4xl md:text-6xl py-5\"\n  }, mdx.frontmatter.title), React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: \"flex\"\n  }, React.createElement(\"span\", {\n    className: \"mr-1 flex\"\n  }, mdx.frontmatter.date), React.createElement(\"span\", {\n    className: \"mx-1 flex\"\n  }))), React.createElement(\"div\", {\n    className: \"py-5 prose prose-xl dark:prose-invert max-w-none\"\n  }, children), React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: \"font-semibold\"\n  }, \"Tagged in:\"), \" \", mdx.frontmatter.tags.map(tag => React.createElement(Link, {\n    to: \"/blog/tags/\" + tag.toLowerCase() + \"/\",\n    className: \"underline mr-1\"\n  }, tag))))));\n};\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","h3","_provideComponents","components","React","href","wrapper","MDXLayout","Post","_ref","data","mdx","children","Layout","pageTitle","frontmatter","title","className","date","tags","map","tag","Link","to","toLowerCase","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}