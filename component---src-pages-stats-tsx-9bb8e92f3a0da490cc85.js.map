{"version":3,"file":"component---src-pages-stats-tsx-9bb8e92f3a0da490cc85.js","mappings":"sxBA8EA,UAzEc,WACZ,OAAkCA,EAAAA,EAAAA,UAAc,IAAzCC,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,mCAAG,2GACKC,EAAAA,EAAAA,MADL,OAIf,IAHMC,EADS,OAEXC,EAAiB,GACfC,EAAoB,GACjBC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IACN,OAAtBH,EAAMG,GAAGE,UACXH,EAAkBI,MAAKC,EAAAA,EAAAA,IAAiBP,EAAMG,GAAGK,OANtCC,OAAAA,EAAAA,KAAAA,EASTC,QAAQC,IAAIT,GACfU,MAAK,SAAChB,GACL,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAUQ,OAAQD,IAEpC,IADA,IAAMU,EAAgBC,OAAOC,KAAKnB,EAAUO,IACnCa,EAAI,EAAGA,EAAIH,EAAcT,OAAQY,IACxCf,EAAUY,EAAcG,IAAOf,EAAUY,EAAcG,IAAMf,EAAUY,EAAcG,IAAMpB,EAAUO,GAAGU,EAAcG,IAAMpB,EAAUO,GAAGU,EAAcG,OAdhJ,OAoBff,EAAYa,OAAOG,QAAQhB,GAAWiB,MAAK,kBAAGC,EAAH,iBAAiBA,KAAGC,QAAO,SAACC,EAAD,SAAKC,EAAL,KAAQC,EAAR,mBAAqBF,GAArB,WAAyBC,GAAIC,EAA7B,MAAmC,IAEzG1B,EAAaI,GAtBE,4CAAH,qDA6Bd,OAJAuB,EAAAA,EAAAA,YAAU,WACR1B,MACC,IAGD2B,EAAAA,cAACC,EAAAA,EAAD,CAAQC,UAAU,SAChBF,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,0BACbH,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,2BAAd,mBACAH,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,gHACbH,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,0BAAd,uBACAH,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,8CACdH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,wEACZd,OAAOC,KAAKnB,GAAWiC,KAAI,SAACC,GAE3B,IAAMC,EAAcjB,OAAOkB,OAAOpC,GAAWwB,QAAO,SAACW,EAAKE,GAAN,OAAgBF,EAAME,IAAO,GAC3EC,EAAQpB,OAAOC,KAAKnB,GAAWuC,QAAQL,GACvCM,EAAQtB,OAAOC,KAAKnB,GAAWQ,OAAS,EAC9C,OACEqB,EAAAA,cAAAA,MAAAA,CAAKY,IAAKP,EAAMF,UAAS,UAAqB,IAAVM,EAAc,YAAc,IAAvC,KAA6CA,IAAUE,EAAQ,YAAc,IAAME,MAAO,CACjHC,MAAU3C,EAAUkC,GAAQC,EAAM,IAA7B,IAELS,iBAAiBC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAOX,GAAMY,aAKtCjB,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,oBACZd,OAAOC,KAAKnB,GAAWiC,KAAI,SAACC,GAE3B,IAAMC,EAAcjB,OAAOkB,OAAOpC,GAAWwB,QAAO,SAACW,EAAKE,GAAN,OAAgBF,EAAME,IAAO,GACjF,OAEER,EAAAA,cAAAA,MAAAA,CAAKY,IAAKP,EAAMF,UAAU,wBAAuBH,EAAAA,cAAAA,OAAAA,CAAMa,MAAO,CAACI,OAAOD,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAOX,GAAMY,QAAlC,KAAjD,IAA0GjB,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,iBAAiBE,GAA3I,KAA0JlC,EAAUkC,GAAQC,EAAM,KAAKY,QAAQ,GAA/L,SAINlB,EAAAA,cAAAA,QAAAA,CAAOG,UAAU,oCAAjB","sources":["webpack://github-pages/./src/pages/stats.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getRepoLanguages, getRepos } from \"../../utils/codeGallery\";\nimport Layout from \"../components/layout\";\nimport * as colors from \"../../utils/colors.json\";\n\nconst Stats = () => {\n  const [languages, setLanguages] = useState<any>({});\n  \n  const getStats = async () => {\n    const repos = await getRepos();\n    let histogram: any = {};\n    const languageResponses = [];\n    for (let i = 0; i < repos.length; i++) {\n      if (repos[i].language !== null) {\n        languageResponses.push(getRepoLanguages(repos[i].name));\n      }\n    }\n    await Promise.all(languageResponses)\n      .then((languages) => {\n        for (let i = 0; i < languages.length; i++) {\n          const languageIndex = Object.keys(languages[i]);\n          for (let j = 0; j < languageIndex.length; j++) {\n            histogram[languageIndex[j]] = (histogram[languageIndex[j]] ? histogram[languageIndex[j]] + languages[i][languageIndex[j]] : languages[i][languageIndex[j]]);\n          }\n        }\n      });\n\n    // @ts-expect-error\n    histogram = Object.entries(histogram).sort(([,a],[,b]) => b-a).reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\n\n    setLanguages(histogram);\n  }\n\n  useEffect(() => {\n    getStats();\n  }, []);\n\n  return (\n    <Layout pageTitle=\"Stats\">\n      <div className=\"max-w-[1280px] mx-auto\">\n        <h1 className=\"text-6xl font-bold py-6\">My Github Stats</h1>\n        <div>\n          <div className=\"rounded-xl bg-gradient-to-r bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 p-2 sm:p-6\">\n            <h2 className=\"text-4xl font-semibold\">Most Used Languages</h2>\n            <hr className=\"my-6 border-gray-500 dark:border-gray-400\" />\n            <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 flex flex-row\">\n              {Object.keys(languages).map((lang) => {\n                // @ts-expect-error\n                const sum: number = Object.values(languages).reduce((sum, next) => (sum + next), 0);\n                const count = Object.keys(languages).indexOf(lang);\n                const total = Object.keys(languages).length - 1;\n                return (\n                  <div key={lang} className={`h-2.5 ${count === 0 ? \"rounded-l\" : \"\"} ${count === total ? \"rounded-r\" : \"\"}`} style={{\n                    width: `${languages[lang] / sum * 100}%`,\n                    // @ts-expect-error\n                    backgroundColor: colors[lang].color\n                  }}></div>\n                );\n              })}\n            </div>\n            <div className=\"grid grid-cols-3\">\n              {Object.keys(languages).map((lang) => {\n                // @ts-expect-error\n                const sum: number = Object.values(languages).reduce((sum, next) => (sum + next), 0);\n                return (\n                  // @ts-expect-error\n                  <div key={lang} className=\"w-[80%] mx-auto py-4\"><span style={{color: colors[lang].color}}>&#9679;</span> <span className=\"font-semibold\">{lang}</span> {(languages[lang] / sum * 100).toFixed(2)}%</div>\n                );\n              })}\n            </div>\n            <small className=\"text-gray-500 dark:text-gray-400\">Data from Github API based on most used language in each public repo</small>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport default Stats;\n"],"names":["useState","languages","setLanguages","getStats","getRepos","repos","histogram","languageResponses","i","length","language","push","getRepoLanguages","name","_context","Promise","all","then","languageIndex","Object","keys","j","entries","sort","a","reduce","r","k","v","useEffect","React","Layout","pageTitle","className","map","lang","sum","values","next","count","indexOf","total","key","style","width","backgroundColor","colors","color","toFixed"],"sourceRoot":""}